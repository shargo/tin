program = (LINE_START statement)+

statement = head statement_args | expression

head = SYMBOL

statement_args = expression* block?

fnexpr = simple_expression

block = INDENT (LINE_START statement)+ DEDENT

<expression> = simple_expression (OPERATOR simple_expression)*

<simple_expression> = SYMBOL | NUMBER | fncall | grouping_expression

grouping_expression = LPAREN expression+ RPAREN

fncall = simple_expression arglist

arglist = LPAREN RPAREN | LPAREN expression (COMMA expression)* RPAREN

SYMBOL = #'[\p{L}][-+=!$%^&*<>_|\p{L}\p{N}]*'

OPERATOR = #'[-+=!$%^&*<>_][-+=!$%^&*<>_|\p{L}\p{N}]*'

NUMBER = #'[\d]+'

<COLON> = <':'>

<COMMA> = <','>

<LPAREN> = <'('>

<RPAREN> = <')'>

<LINE_START> = <'≈'>

<INDENT> = <'»'>

<DEDENT> = <'«'>

(*
program = line+
<line> = line_start <whitespace>? (fncall | statement) <whitespace>?
statement = head <whitespace>? (form <whitespace>?)+
block = indent line+ dedent
fncall = head <lparen> (form <whitespace>?)* <rparen>
head = form
<form> = symbol | number | fncall | block
symbol = #'[-+=!$%^&*<>_|\p{L}][-+=!$%^&*<>_|\p{L}\p{N}]*'
number = #'[\d]+'
<lparen> = <'('>
<rparen> = <')'>
<line_start> = <'≈'>
<indent> = <'»'>
<dedent> = <'«'>
<whitespace> = #"\s+"
*)